---@meta

--- The hook library allows you to add hooks called by the game engine, allowing multiple scripts to modify game function.
hook = {}

---![(Shared and Menu)](https://github.com/user-attachments/assets/8f5230ff-38f7-493b-b9fc-cc70ffd5b3f4) Registers a function (or "callback") with the [Hook](https://wiki.facepunch.com/gmod/Hook) system so that it will be called automatically whenever a specific event (or "hook") occurs.
---
---[View wiki](https://wiki.facepunch.com/gmod/hook.Add)
---@param eventName string The event to hook on to. This can be any GM_Hooks hook, gameevent after using gameevent.Listen, or custom hook run with hook.Call or hook.Run.
---@param identifier any The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier **should** be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
---
--- The identifier can be either a string, or a table/object with an IsValid function defined such as an Entity or Panel. numbers and booleans, for example, are not allowed.
---
--- If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, if IsValid( identifier ) returns false when **any** eventName hook is called, the hook will be removed.
---@param func function The function to be called, arguments given to it depend on the identifier used.
---
--- 	Returning any value besides nil from the hook's function will stop other hooks of the same event down the loop from being executed. Only return a value when absolutely necessary and when you know what you are doing.
---
--- 	It will also prevent the associated `GM:*` hook from being called on the gamemode.
---
--- 	It WILL break other addons.
---@overload fun(eventName: "AcceptInput", identifier: any, func: fun(ent: Entity, input: string, activator: Entity, caller: Entity, value: any):(boolean?))
---@overload fun(eventName: "AddDeathNotice", identifier: any, func: fun(attacker: string, attackerTeam: number, inflictor: string, victim: string, victimTeam: number))
---@overload fun(eventName: "AdjustMouseSensitivity", identifier: any, func: fun(defaultSensitivity: number, localFOV: number, defaultFOV: number):(number?))
---@overload fun(eventName: "AllowPlayerPickup", identifier: any, func: fun(ply: Player, ent: Entity):(boolean?))
---@overload fun(eventName: "CalcMainActivity", identifier: any, func: fun(ply: Player, vel: Vector):(number, number?))
---@overload fun(eventName: "CalcVehicleView", identifier: any, func: fun(veh: Vehicle, ply: Player, view: table):(table?))
---@overload fun(eventName: "CalcView", identifier: any, func: fun(ply: Player, origin: Vector, angles: Angle, fov: number, znear: number, zfar: number):(table?))
---@overload fun(eventName: "CalcViewModelView", identifier: any, func: fun(wep: Weapon, vm: Entity, oldPos: Vector, oldAng: Angle, pos: Vector, ang: Angle):(Vector, Angle?))
---@overload fun(eventName: "CanCreateUndo", identifier: any, func: fun(ply: Player, undo: table):(boolean?))
---@overload fun(eventName: "CanEditVariable", identifier: any, func: fun(ent: Entity, ply: Player, key: string, val: string, editor: table):(boolean?))
---@overload fun(eventName: "CanExitVehicle", identifier: any, func: fun(veh: Vehicle, ply: Player):(boolean?))
---@overload fun(eventName: "CanPlayerEnterVehicle", identifier: any, func: fun(player: Player, vehicle: Vehicle, role: number):(boolean?))
---@overload fun(eventName: "CanPlayerSuicide", identifier: any, func: fun(player: Player):(boolean?))
---@overload fun(eventName: "CanPlayerUnfreeze", identifier: any, func: fun(player: Player, entity: Entity, phys: PhysObj):(boolean?))
---@overload fun(eventName: "CanProperty", identifier: any, func: fun(ply: Player, property: string, ent: Entity):(boolean?))
---@overload fun(eventName: "CanUndo", identifier: any, func: fun(ply: Player, undo: Undo):(boolean?))
---@overload fun(eventName: "CaptureVideo", identifier: any, func: fun())
---@overload fun(eventName: "ChatText", identifier: any, func: fun(index: number, name: string, text: string, type: string):(boolean?))
---@overload fun(eventName: "ChatTextChanged", identifier: any, func: fun(text: string))
---@overload fun(eventName: "CheckPassword", identifier: any, func: fun(steamID64: string, ipAddress: string, svPassword: string, clPassword: string, name: string):(boolean, string?))
---@overload fun(eventName: "ClientSignOnStateChanged", identifier: any, func: fun(userID: number, oldState: number, newState: number))
---@overload fun(eventName: "CloseDermaMenus", identifier: any, func: fun())
---@overload fun(eventName: "CreateClientsideRagdoll", identifier: any, func: fun(entity: Entity, ragdoll: Entity))
---@overload fun(eventName: "CreateEntityRagdoll", identifier: any, func: fun(owner: Entity, ragdoll: Entity))
---@overload fun(eventName: "CreateMove", identifier: any, func: fun(cmd: CUserCmd):(boolean?))
---@overload fun(eventName: "CreateTeams", identifier: any, func: fun())
---@overload fun(eventName: "DoAnimationEvent", identifier: any, func: fun(ply: Player, event: number, data: number):(number?))
---@overload fun(eventName: "DoPlayerDeath", identifier: any, func: fun(ply: Player, attacker: Entity, dmg: CTakeDamageInfo))
---@overload fun(eventName: "DrawDeathNotice", identifier: any, func: fun(x: number, y: number))
---@overload fun(eventName: "DrawMonitors", identifier: any, func: fun())
---@overload fun(eventName: "DrawOverlay", identifier: any, func: fun())
---@overload fun(eventName: "DrawPhysgunBeam", identifier: any, func: fun(ply: Player, physgun: Weapon, enabled: boolean, target: Entity, physBone: number, hitPos: Vector):(boolean?))
---@overload fun(eventName: "EndEntityDriving", identifier: any, func: fun(ent: Entity, ply: Player))
---@overload fun(eventName: "EntityEmitSound", identifier: any, func: fun(data: table):(boolean?))
---@overload fun(eventName: "EntityFireBullets", identifier: any, func: fun(entity: Entity, data: Bullet):(boolean?))
---@overload fun(eventName: "EntityKeyValue", identifier: any, func: fun(ent: Entity, key: string, value: string):(string?))
---@overload fun(eventName: "EntityNetworkedVarChanged", identifier: any, func: fun(ent: Entity, name: string, oldval: any, newval: any))
---@overload fun(eventName: "EntityRemoved", identifier: any, func: fun(ent: Entity, fullUpdate: boolean))
---@overload fun(eventName: "EntityTakeDamage", identifier: any, func: fun(target: Entity, dmg: CTakeDamageInfo):(boolean?))
---@overload fun(eventName: "FindUseEntity", identifier: any, func: fun(ply: Player, defaultEnt: Entity):(Entity?))
---@overload fun(eventName: "FinishChat", identifier: any, func: fun())
---@overload fun(eventName: "FinishMove", identifier: any, func: fun(ply: Player, mv: CMoveData):(boolean?))
---@overload fun(eventName: "ForceDermaSkin", identifier: any, func: fun():(string?))
---@overload fun(eventName: "GameContentChanged", identifier: any, func: fun())
---@overload fun(eventName: "GetDeathNoticeEntityName", identifier: any, func: fun(name: String):(string?))
---@overload fun(eventName: "GetFallDamage", identifier: any, func: fun(ply: Player, speed: number):(number?))
---@overload fun(eventName: "GetGameDescription", identifier: any, func: fun():(string?))
---@overload fun(eventName: "GetMotionBlurValues", identifier: any, func: fun(horizontal: number, vertical: number, forward: number, rotational: number):(number, number, number, number?))
---@overload fun(eventName: "GetPreferredCarryAngles", identifier: any, func: fun(ent: Entity, ply: Player):(Angle?))
---@overload fun(eventName: "GetTeamColor", identifier: any, func: fun(ent: Entity):(table?))
---@overload fun(eventName: "GetTeamNumColor", identifier: any, func: fun(team: number):(table?))
---@overload fun(eventName: "GrabEarAnimation", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "GravGunOnDropped", identifier: any, func: fun(ply: Player, ent: Entity))
---@overload fun(eventName: "GravGunOnPickedUp", identifier: any, func: fun(ply: Player, ent: Entity))
---@overload fun(eventName: "GravGunPickupAllowed", identifier: any, func: fun(ply: Player, ent: Entity):(boolean?))
---@overload fun(eventName: "GravGunPunt", identifier: any, func: fun(ply: Player, ent: Entity):(boolean?))
---@overload fun(eventName: "GUIMouseDoublePressed", identifier: any, func: fun(mouseCode: number, aimVector: Vector))
---@overload fun(eventName: "GUIMousePressed", identifier: any, func: fun(mouseCode: number, aimVector: Vector))
---@overload fun(eventName: "GUIMouseReleased", identifier: any, func: fun(mouseCode: number, aimVector: Vector))
---@overload fun(eventName: "HandlePlayerArmorReduction", identifier: any, func: fun(ply: Player, dmginfo: CTakeDamageInfo))
---@overload fun(eventName: "HandlePlayerDriving", identifier: any, func: fun(ply: Player):(boolean?))
---@overload fun(eventName: "HandlePlayerDucking", identifier: any, func: fun(ply: Player, velocity: Vector):(boolean?))
---@overload fun(eventName: "HandlePlayerJumping", identifier: any, func: fun(ply: Player, velocity: Vector):(boolean?))
---@overload fun(eventName: "HandlePlayerLanding", identifier: any, func: fun(ply: Player, velocity: Vector, onGround: boolean):(boolean?))
---@overload fun(eventName: "HandlePlayerNoClipping", identifier: any, func: fun(ply: Player, velocity: Vector):(boolean?))
---@overload fun(eventName: "HandlePlayerSwimming", identifier: any, func: fun(ply: Player, velocity: Vector):(boolean?))
---@overload fun(eventName: "HandlePlayerVaulting", identifier: any, func: fun(ply: Player, velocity: Vector):(boolean?))
---@overload fun(eventName: "HideTeam", identifier: any, func: fun())
---@overload fun(eventName: "HUDAmmoPickedUp", identifier: any, func: fun(itemName: string, amount: number))
---@overload fun(eventName: "HUDDrawPickupHistory", identifier: any, func: fun())
---@overload fun(eventName: "HUDDrawScoreBoard", identifier: any, func: fun())
---@overload fun(eventName: "HUDDrawTargetID", identifier: any, func: fun():(boolean?))
---@overload fun(eventName: "HUDItemPickedUp", identifier: any, func: fun(itemName: string))
---@overload fun(eventName: "HUDPaint", identifier: any, func: fun())
---@overload fun(eventName: "HUDPaintBackground", identifier: any, func: fun())
---@overload fun(eventName: "HUDShouldDraw", identifier: any, func: fun(name: string):(boolean?))
---@overload fun(eventName: "HUDWeaponPickedUp", identifier: any, func: fun(weapon: Weapon))
---@overload fun(eventName: "Initialize", identifier: any, func: fun())
---@overload fun(eventName: "InitPostEntity", identifier: any, func: fun())
---@overload fun(eventName: "InputMouseApply", identifier: any, func: fun(cmd: CUserCmd, x: number, y: number, ang: Angle):(boolean?))
---@overload fun(eventName: "IsSpawnpointSuitable", identifier: any, func: fun(ply: Player, spawnpoint: Entity, makeSuitable: boolean):(boolean?))
---@overload fun(eventName: "KeyPress", identifier: any, func: fun(ply: Player, key: number))
---@overload fun(eventName: "KeyRelease", identifier: any, func: fun(ply: Player, key: number))
---@overload fun(eventName: "LoadGModSave", identifier: any, func: fun(data: string, map: string, timestamp: number))
---@overload fun(eventName: "LoadGModSaveFailed", identifier: any, func: fun():(string, string?))
---@overload fun(eventName: "MenuStart", identifier: any, func: fun())
---@overload fun(eventName: "MouthMoveAnimation", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "Move", identifier: any, func: fun(ply: Player, mv: CMoveData):(boolean?))
---@overload fun(eventName: "NeedsDepthPass", identifier: any, func: fun():(boolean?))
---@overload fun(eventName: "NetworkEntityCreated", identifier: any, func: fun(ent: Entity))
---@overload fun(eventName: "NetworkIDValidated", identifier: any, func: fun(name: string, steamID: string, ownerID: string))
---@overload fun(eventName: "NotifyShouldTransmit", identifier: any, func: fun(entity: Entity, shouldtransmit: boolean))
---@overload fun(eventName: "OnAchievementAchieved", identifier: any, func: fun(ply: Player, achievement: number))
---@overload fun(eventName: "OnChatTab", identifier: any, func: fun(text: string):(string?))
---@overload fun(eventName: "OnCleanup", identifier: any, func: fun(name: string):(boolean?))
---@overload fun(eventName: "OnCloseCaptionEmit", identifier: any, func: fun(soundScript: string, duration: number, fromPlayer: boolean, fullText: string):(boolean?))
---@overload fun(eventName: "OnContextMenuClose", identifier: any, func: fun())
---@overload fun(eventName: "OnContextMenuOpen", identifier: any, func: fun())
---@overload fun(eventName: "OnCrazyPhysics", identifier: any, func: fun(ent: Entity, physobj: PhysObj))
---@overload fun(eventName: "OnDamagedByExplosion", identifier: any, func: fun(ply: Player, dmginfo: CTakeDamageInfo))
---@overload fun(eventName: "OnEntityCreated", identifier: any, func: fun(entity: Entity))
---@overload fun(eventName: "OnEntityWaterLevelChanged", identifier: any, func: fun(entity: Entity, old: number, new: number))
---@overload fun(eventName: "OnGamemodeLoaded", identifier: any, func: fun())
---@overload fun(eventName: "OnLuaError", identifier: any, func: fun(error: string, realm: string, stack: table, name: string, id: string))
---@overload fun(eventName: "OnNotifyAddonConflict", identifier: any, func: fun(addon1: string, addon2: string, fileName: string))
---@overload fun(eventName: "OnNPCKilled", identifier: any, func: fun(npc: NPC, attacker: Entity, inflictor: Entity))
---@overload fun(eventName: "OnPauseMenuBlockedTooManyTimes", identifier: any, func: fun())
---@overload fun(eventName: "OnPauseMenuShow", identifier: any, func: fun():(boolean?))
---@overload fun(eventName: "OnPermissionsChanged", identifier: any, func: fun())
---@overload fun(eventName: "OnPhysgunFreeze", identifier: any, func: fun(weapon: Entity, physobj: PhysObj, ent: Entity, ply: Player))
---@overload fun(eventName: "OnPhysgunPickup", identifier: any, func: fun(ply: Player, ent: Entity))
---@overload fun(eventName: "OnPhysgunReload", identifier: any, func: fun(physgun: Weapon, ply: Player):(boolean?))
---@overload fun(eventName: "OnPlayerChangedTeam", identifier: any, func: fun(ply: Player, oldTeam: number, newTeam: number))
---@overload fun(eventName: "OnPlayerChat", identifier: any, func: fun(ply: Player, text: string, teamChat: boolean, isDead: boolean):(boolean?))
---@overload fun(eventName: "OnPlayerHitGround", identifier: any, func: fun(player: Entity, inWater: boolean, onFloater: boolean, speed: number):(boolean?))
---@overload fun(eventName: "OnPlayerJump", identifier: any, func: fun(player: Entity, speed: number))
---@overload fun(eventName: "OnPlayerPhysicsDrop", identifier: any, func: fun(ply: Player, ent: Entity, thrown: boolean))
---@overload fun(eventName: "OnPlayerPhysicsPickup", identifier: any, func: fun(ply: Player, ent: Entity))
---@overload fun(eventName: "OnReloaded", identifier: any, func: fun())
---@overload fun(eventName: "OnScreenSizeChanged", identifier: any, func: fun(oldWidth: number, oldHeight: number, newWidth: number, newHeight: number))
---@overload fun(eventName: "OnSpawnMenuClose", identifier: any, func: fun())
---@overload fun(eventName: "OnSpawnMenuOpen", identifier: any, func: fun())
---@overload fun(eventName: "OnTextEntryGetFocus", identifier: any, func: fun(panel: Panel))
---@overload fun(eventName: "OnTextEntryLoseFocus", identifier: any, func: fun(panel: Panel))
---@overload fun(eventName: "OnUndo", identifier: any, func: fun(name: string, customText: string):(boolean?))
---@overload fun(eventName: "OnViewModelChanged", identifier: any, func: fun(viewmodel: Entity, oldModel: string, newModel: string))
---@overload fun(eventName: "PhysgunDrop", identifier: any, func: fun(player: Player, entity: Entity))
---@overload fun(eventName: "PhysgunPickup", identifier: any, func: fun(player: Player, entity: Entity):(boolean?))
---@overload fun(eventName: "PlayerAmmoChanged", identifier: any, func: fun(ply: Player, ammoID: number, oldCount: number, newCount: number))
---@overload fun(eventName: "PlayerAuthed", identifier: any, func: fun(ply: Player, steamid: string, uniqueid: string))
---@overload fun(eventName: "PlayerBindPress", identifier: any, func: fun(ply: Player, bind: string, pressed: boolean, code: number):(boolean?))
---@overload fun(eventName: "PlayerButtonDown", identifier: any, func: fun(ply: Player, button: BUTTON_CODE))
---@overload fun(eventName: "PlayerButtonUp", identifier: any, func: fun(ply: Player, button: BUTTON_CODE))
---@overload fun(eventName: "PlayerCanHearPlayersVoice", identifier: any, func: fun(listener: Player, talker: Player):(boolean, boolean?))
---@overload fun(eventName: "PlayerCanJoinTeam", identifier: any, func: fun(ply: Player, team: number):(boolean?))
---@overload fun(eventName: "PlayerCanPickupItem", identifier: any, func: fun(ply: Player, item: Entity):(boolean?))
---@overload fun(eventName: "PlayerCanPickupWeapon", identifier: any, func: fun(ply: Player, weapon: Weapon):(boolean?))
---@overload fun(eventName: "PlayerCanSeePlayersChat", identifier: any, func: fun(text: string, teamOnly: boolean, listener: Player, speaker: Player):(boolean?))
---@overload fun(eventName: "PlayerChangedTeam", identifier: any, func: fun(ply: Player, oldTeam: number, newTeam: number))
---@overload fun(eventName: "PlayerCheckLimit", identifier: any, func: fun(ply: Player, limitName: string, current: number, defaultMax: number):(boolean?))
---@overload fun(eventName: "PlayerClassChanged", identifier: any, func: fun(ply: Player, newID: number))
---@overload fun(eventName: "PlayerConnect", identifier: any, func: fun(name: string, ip: string))
---@overload fun(eventName: "PlayerDeath", identifier: any, func: fun(victim: Player, inflictor: Entity, attacker: Entity))
---@overload fun(eventName: "PlayerDeathSound", identifier: any, func: fun(ply: Player):(boolean?))
---@overload fun(eventName: "PlayerDeathThink", identifier: any, func: fun(ply: Player):(boolean?))
---@overload fun(eventName: "PlayerDisconnected", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "PlayerDriveAnimate", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "PlayerDroppedWeapon", identifier: any, func: fun(owner: Player, wep: Weapon))
---@overload fun(eventName: "PlayerEndVoice", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "PlayerEnteredVehicle", identifier: any, func: fun(ply: Player, veh: Vehicle, role: number))
---@overload fun(eventName: "PlayerFireAnimationEvent", identifier: any, func: fun(ply: Player, pos: Vector, ang: Angle, event: number, name: string):(boolean?))
---@overload fun(eventName: "PlayerFootstep", identifier: any, func: fun(ply: Player, pos: Vector, foot: number, sound: string, volume: number, filter: CRecipientFilter):(boolean?))
---@overload fun(eventName: "PlayerFrozeObject", identifier: any, func: fun(ply: Player, ent: Entity, physobj: PhysObj))
---@overload fun(eventName: "PlayerHandleAnimEvent", identifier: any, func: fun(ply: Player, event: number, eventTime: number, cycle: number, type: number, options: string))
---@overload fun(eventName: "PlayerHurt", identifier: any, func: fun(victim: Player, attacker: Entity, healthRemaining: number, damageTaken: number))
---@overload fun(eventName: "PlayerInitialSpawn", identifier: any, func: fun(player: Player, transition: boolean))
---@overload fun(eventName: "PlayerJoinTeam", identifier: any, func: fun(ply: Player, team: number))
---@overload fun(eventName: "PlayerLeaveVehicle", identifier: any, func: fun(ply: Player, veh: Vehicle))
---@overload fun(eventName: "PlayerLoadout", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "PlayerNoClip", identifier: any, func: fun(ply: Player, desiredState: boolean):(boolean?))
---@overload fun(eventName: "PlayerPostThink", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "PlayerRequestTeam", identifier: any, func: fun(ply: Player, team: number))
---@overload fun(eventName: "PlayerSay", identifier: any, func: fun(sender: Player, text: string, teamChat: boolean):(string?))
---@overload fun(eventName: "PlayerSelectSpawn", identifier: any, func: fun(ply: Player, transition: boolean):(Entity?))
---@overload fun(eventName: "PlayerSelectTeamSpawn", identifier: any, func: fun(team: number, ply: Player):(Entity?))
---@overload fun(eventName: "PlayerSetHandsModel", identifier: any, func: fun(ply: Player, ent: Entity))
---@overload fun(eventName: "PlayerSetModel", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "PlayerShouldTakeDamage", identifier: any, func: fun(ply: Player, attacker: Entity):(boolean?))
---@overload fun(eventName: "PlayerShouldTaunt", identifier: any, func: fun(ply: Player, act: number):(boolean?))
---@overload fun(eventName: "PlayerSilentDeath", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "PlayerSpawn", identifier: any, func: fun(player: Player, transition: boolean))
---@overload fun(eventName: "PlayerSpawnAsSpectator", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "PlayerSpray", identifier: any, func: fun(sprayer: Player):(boolean?))
---@overload fun(eventName: "PlayerStartTaunt", identifier: any, func: fun(ply: Player, act: number, length: number))
---@overload fun(eventName: "PlayerStartVoice", identifier: any, func: fun(ply: Player, plyIndex: number):(boolean?))
---@overload fun(eventName: "PlayerStepSoundTime", identifier: any, func: fun(ply: Player, type: number, walking: boolean):(number?))
---@overload fun(eventName: "PlayerSwitchFlashlight", identifier: any, func: fun(ply: Player, enabled: boolean):(boolean?))
---@overload fun(eventName: "PlayerSwitchWeapon", identifier: any, func: fun(player: Player, oldWeapon: Weapon, newWeapon: Weapon):(boolean?))
---@overload fun(eventName: "PlayerTick", identifier: any, func: fun(player: Player, mv: CMoveData))
---@overload fun(eventName: "PlayerTraceAttack", identifier: any, func: fun(ply: Player, dmginfo: CTakeDamageInfo, dir: Vector, trace: TraceResult):(boolean?))
---@overload fun(eventName: "PlayerUnfrozeObject", identifier: any, func: fun(ply: Player, ent: Entity, physobj: PhysObj))
---@overload fun(eventName: "PlayerUse", identifier: any, func: fun(ply: Player, ent: Entity):(boolean?))
---@overload fun(eventName: "PopulateMenuBar", identifier: any, func: fun(menubar: Panel))
---@overload fun(eventName: "PostCleanupMap", identifier: any, func: fun())
---@overload fun(eventName: "PostDraw2DSkyBox", identifier: any, func: fun())
---@overload fun(eventName: "PostDrawEffects", identifier: any, func: fun())
---@overload fun(eventName: "PostDrawHUD", identifier: any, func: fun())
---@overload fun(eventName: "PostDrawOpaqueRenderables", identifier: any, func: fun(bDrawingDepth: boolean, bDrawingSkybox: boolean, isDraw3DSkybox: boolean))
---@overload fun(eventName: "PostDrawPlayerHands", identifier: any, func: fun(hands: Entity, vm: Entity, ply: Player, weapon: Weapon))
---@overload fun(eventName: "PostDrawSkyBox", identifier: any, func: fun())
---@overload fun(eventName: "PostDrawTranslucentRenderables", identifier: any, func: fun(bDrawingDepth: boolean, bDrawingSkybox: boolean, isDraw3DSkybox: boolean))
---@overload fun(eventName: "PostDrawViewModel", identifier: any, func: fun(viewmodel: Entity, player: Player, weapon: Weapon))
---@overload fun(eventName: "PostEntityFireBullets", identifier: any, func: fun(entity: Entity, data: FiredBullet):(boolean?))
---@overload fun(eventName: "PostEntityTakeDamage", identifier: any, func: fun(ent: Entity, dmginfo: CTakeDamageInfo, wasDamageTaken: boolean))
---@overload fun(eventName: "PostGamemodeLoaded", identifier: any, func: fun())
---@overload fun(eventName: "PostPlayerDeath", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "PostPlayerDraw", identifier: any, func: fun(ply: Player, flags: number))
---@overload fun(eventName: "PostProcessPermitted", identifier: any, func: fun(effect_name: string):(boolean?))
---@overload fun(eventName: "PostRender", identifier: any, func: fun())
---@overload fun(eventName: "PostRenderVGUI", identifier: any, func: fun())
---@overload fun(eventName: "PostUndo", identifier: any, func: fun(undo: table, count: number))
---@overload fun(eventName: "PreCleanupMap", identifier: any, func: fun())
---@overload fun(eventName: "PreDrawEffects", identifier: any, func: fun())
---@overload fun(eventName: "PreDrawHalos", identifier: any, func: fun())
---@overload fun(eventName: "PreDrawHUD", identifier: any, func: fun())
---@overload fun(eventName: "PreDrawOpaqueRenderables", identifier: any, func: fun(isDrawingDepth: boolean, isDrawSkybox: boolean, isDraw3DSkybox: boolean):(boolean?))
---@overload fun(eventName: "PreDrawPlayerHands", identifier: any, func: fun(hands: Entity, vm: Entity, ply: Player, weapon: Weapon):(boolean?))
---@overload fun(eventName: "PreDrawSkyBox", identifier: any, func: fun():(boolean?))
---@overload fun(eventName: "PreDrawTranslucentRenderables", identifier: any, func: fun(isDrawingDepth: boolean, isDrawSkybox: boolean, isDraw3DSkybox: boolean):(boolean?))
---@overload fun(eventName: "PreDrawViewModel", identifier: any, func: fun(vm: Entity, ply: Player, weapon: Weapon):(boolean?))
---@overload fun(eventName: "PreDrawViewModels", identifier: any, func: fun())
---@overload fun(eventName: "PreGamemodeLoaded", identifier: any, func: fun())
---@overload fun(eventName: "PrePlayerDraw", identifier: any, func: fun(player: Player, flags: number):(boolean?))
---@overload fun(eventName: "PreRegisterSENT", identifier: any, func: fun(ent: table, class: string):(boolean?))
---@overload fun(eventName: "PreRegisterSWEP", identifier: any, func: fun(swep: table, class: string):(boolean?))
---@overload fun(eventName: "PreRender", identifier: any, func: fun():(boolean?))
---@overload fun(eventName: "PreUndo", identifier: any, func: fun(undo: table))
---@overload fun(eventName: "PreventScreenClicks", identifier: any, func: fun():(boolean?))
---@overload fun(eventName: "PropBreak", identifier: any, func: fun(attacker: Player, prop: Entity))
---@overload fun(eventName: "RenderScene", identifier: any, func: fun(origin: Vector, angles: Angle, fov: number):(boolean?))
---@overload fun(eventName: "RenderScreenspaceEffects", identifier: any, func: fun())
---@overload fun(eventName: "Restored", identifier: any, func: fun())
---@overload fun(eventName: "Saved", identifier: any, func: fun())
---@overload fun(eventName: "ScaleNPCDamage", identifier: any, func: fun(npc: NPC, hitgroup: number, dmginfo: CTakeDamageInfo))
---@overload fun(eventName: "ScalePlayerDamage", identifier: any, func: fun(ply: Player, hitgroup: number, dmginfo: CTakeDamageInfo):(boolean?))
---@overload fun(eventName: "ScoreboardHide", identifier: any, func: fun())
---@overload fun(eventName: "ScoreboardShow", identifier: any, func: fun():(boolean?))
---@overload fun(eventName: "SendDeathNotice", identifier: any, func: fun(attacker: Entity|string|nil, inflictor: string, victim: Entity|string, flags: number))
---@overload fun(eventName: "SetPlayerSpeed", identifier: any, func: fun(ply: Player, walkSpeed: number, runSpeed: number))
---@overload fun(eventName: "SetupMove", identifier: any, func: fun(ply: Player, mv: CMoveData, cmd: CUserCmd))
---@overload fun(eventName: "SetupPlayerVisibility", identifier: any, func: fun(ply: Player, viewEntity: Entity))
---@overload fun(eventName: "SetupSkyboxFog", identifier: any, func: fun(scale: number):(boolean?))
---@overload fun(eventName: "SetupWorldFog", identifier: any, func: fun():(boolean?))
---@overload fun(eventName: "ShouldCollide", identifier: any, func: fun(ent1: Entity, ent2: Entity):(boolean?))
---@overload fun(eventName: "ShouldDrawLocalPlayer", identifier: any, func: fun(ply: Player):(boolean?))
---@overload fun(eventName: "ShowHelp", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "ShowSpare1", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "ShowSpare2", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "ShowTeam", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "ShutDown", identifier: any, func: fun())
---@overload fun(eventName: "SpawniconGenerated", identifier: any, func: fun(lastmodel: string, imagename: string, modelsleft: number))
---@overload fun(eventName: "SpawnMenuCreated", identifier: any, func: fun())
---@overload fun(eventName: "StartChat", identifier: any, func: fun(isTeamChat: boolean):(boolean?))
---@overload fun(eventName: "StartCommand", identifier: any, func: fun(ply: Player, ucmd: CUserCmd))
---@overload fun(eventName: "StartEntityDriving", identifier: any, func: fun(ent: Entity, ply: Player))
---@overload fun(eventName: "StartGame", identifier: any, func: fun())
---@overload fun(eventName: "Think", identifier: any, func: fun())
---@overload fun(eventName: "Tick", identifier: any, func: fun())
---@overload fun(eventName: "TranslateActivity", identifier: any, func: fun(ply: Player, act: number):(number?))
---@overload fun(eventName: "UpdateAnimation", identifier: any, func: fun(ply: Player, velocity: Vector, maxSeqGroundSpeed: number))
---@overload fun(eventName: "VariableEdited", identifier: any, func: fun(ent: Entity, ply: Player, key: string, val: string, editor: table))
---@overload fun(eventName: "VehicleMove", identifier: any, func: fun(ply: Player, veh: Vehicle, mv: CMoveData))
---@overload fun(eventName: "VGUIMousePressAllowed", identifier: any, func: fun(button: number):(boolean?))
---@overload fun(eventName: "VGUIMousePressed", identifier: any, func: fun(pnl: Panel, mouseCode: number))
---@overload fun(eventName: "WeaponEquip", identifier: any, func: fun(weapon: Weapon, owner: Player))
---@overload fun(eventName: "WorkshopDownloadedFile", identifier: any, func: fun(id: number, title: string))
---@overload fun(eventName: "WorkshopDownloadFile", identifier: any, func: fun(id: number, imageID: number, title: string, size: number))
---@overload fun(eventName: "WorkshopDownloadProgress", identifier: any, func: fun(id: number, imageID: number, title: string, downloaded: number, expected: number))
---@overload fun(eventName: "WorkshopDownloadTotals", identifier: any, func: fun(remain: number, total: number))
---@overload fun(eventName: "WorkshopEnd", identifier: any, func: fun())
---@overload fun(eventName: "WorkshopExtractProgress", identifier: any, func: fun(id: number, ImageID: number, title: string, percent: number))
---@overload fun(eventName: "WorkshopStart", identifier: any, func: fun())
---@overload fun(eventName: "WorkshopSubscriptionsChanged", identifier: any, func: fun())
---@overload fun(eventName: "WorkshopSubscriptionsMessage", identifier: any, func: fun(message: string))
---@overload fun(eventName: "WorkshopSubscriptionsProgress", identifier: any, func: fun(num: number, max: number))
function hook.Add(eventName, identifier, func) end

---![(Shared and Menu)](https://github.com/user-attachments/assets/8f5230ff-38f7-493b-b9fc-cc70ffd5b3f4) Calls all hooks associated with the given event until one returns something other than `nil`, and then returns that data.
---
--- In almost all cases, you should use [hook.Run](https://wiki.facepunch.com/gmod/hook.Run) instead - it calls hook.Call internally but supplies the gamemode table by itself, making your code neater.
---
---[View wiki](https://wiki.facepunch.com/gmod/hook.Call)
---@param eventName string The event to call hooks for.
---@param gamemodeTable? table If the gamemode is specified, the gamemode hook within will be called, otherwise not.
---@param ...? any The arguments to be passed to the hooks.
---@return any ... # Return data from called hooks. Limited to **6** return values.
function hook.Call(eventName, gamemodeTable, ...) end

---![(Shared and Menu)](https://github.com/user-attachments/assets/8f5230ff-38f7-493b-b9fc-cc70ffd5b3f4) Returns a list of all the hooks registered with [hook.Add](https://wiki.facepunch.com/gmod/hook.Add).
---
---[View wiki](https://wiki.facepunch.com/gmod/hook.GetTable)
---@return table # A table of tables. See below for output example.
function hook.GetTable() end

---![(Shared and Menu)](https://github.com/user-attachments/assets/8f5230ff-38f7-493b-b9fc-cc70ffd5b3f4) Removes the hook with the supplied identifier from the given event.
---
---[View wiki](https://wiki.facepunch.com/gmod/hook.Remove)
---@param eventName string The event name.
---@param identifier any The unique identifier of the hook to remove, usually a string.
function hook.Remove(eventName, identifier) end

---![(Shared and Menu)](https://github.com/user-attachments/assets/8f5230ff-38f7-493b-b9fc-cc70ffd5b3f4) Calls all hooks associated with the given event **until** one returns something other than `nil` and then returns that data. If no hook returns any data, it will try to call the `GAMEMODE:`; alternative, if one exists.
---
--- This function internally calls [hook.Call](https://wiki.facepunch.com/gmod/hook.Call).
---
--- See also: [gamemode.Call](https://wiki.facepunch.com/gmod/gamemode.Call) - same as this, but does not call hooks if the gamemode hasn't defined the function.
---
---[View wiki](https://wiki.facepunch.com/gmod/hook.Run)
---@param eventName string The event to call hooks for.
---@param ... any The arguments to be passed to the hooks.
---@return any ... # Return data from called hooks. Limited to **6** return values.
function hook.Run(eventName, ...) end
